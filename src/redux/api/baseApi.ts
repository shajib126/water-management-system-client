import { createApi,fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import { RootState } from "../store";
// const baseQuery = fetchBaseQuery({baseUrl:'http://localhost:5000/api/v1'})
//api url = https://water-management-system.vercel.app/api/v1
//change 
export const baseApi = createApi({
    baseQuery:fetchBaseQuery({baseUrl:'https://water-management-system.vercel.app/api/v1',credentials:'include',prepareHeaders:(headers,{getState})=>{
      const token = (getState() as RootState).auth.token
       
       
       if(token){
        headers.set('authorization',`${token}`)
       }
       return headers
    }}),
    tagTypes:['Category','Order','AdditionalPrice','AdminOrder','Product','Bottle','AdminProfile'],
    endpoints:(build)=>({
        userLogin:build.mutation({
            query:(userInfo)=>({
                url:'/user/login',
                method:'POST',
                body:userInfo
            })
        }),
        userProfile:build.query({
            query:()=>({
                url:'/user/profile',
                method:'GET'
            })
        }),
        adminProfile:build.query({
            query:()=>({
                url:'/admin/profile',
                method:'GET'
            }),
            providesTags:['AdminProfile']
        }),
        requestAdminAccount:build.mutation({
            query:(adminInfo)=>({
                url:'/admin/create',
                method:'POST',
                body:adminInfo
            })
        }),
       
        adminLogin:build.mutation({
            query:(adminInfo)=>({
                url:'/admin/login',
                method:'POST',
                body:adminInfo
            }),
            invalidatesTags:['AdminProfile']
        }),
        approvedAdmin:build.query({
            query:()=>({
                url:'/admin/approved',
                method:'GET'
            })
        }),
        allAdmin:build.query({
            query:()=>({
                url:'/admin',
                method:'GET'
            })
        }),
        createAdditionalPrice:build.mutation({
            query:(additional)=>({
                url:'/additional-price/create',
                method:'POST',
                body:additional
            }),
            invalidatesTags:['AdditionalPrice']
        }),
        updateAdditionalPrice:build.mutation({
            query:(additional)=>({
                url:'/additional-price/update',
                method:'PUT',
                body:additional
            }),
            invalidatesTags:['AdditionalPrice']
        }),
        additionalPrice:build.query({
            query:()=>({
                url:'/additional-price',
                method:'GET'
            }),
            providesTags:['AdditionalPrice']
        }),
        customerRegistration:build.mutation({
            query:(customerInfo)=>({
                url:'/user/create',
                method:'POST',
                body:customerInfo
            })
        }),
        customerLogin:build.mutation({
            query:(customerInfo)=>({
                url:'/user/login',
                method:'POST',
                body:customerInfo
            })
        }),
        customers:build.query({
            query:()=>({
                url:'/user',
                method:'GET'
            })
        }),
        customersBySeller:build.query({
            query:()=>({
                url:'/user/seller',
                method:'GET'
            })
        }),
        customerOrders:build.query({
            query:()=>({
                    url:`/order/customer-order?thisYear=true`,
                    method:'GET'
            }),
            providesTags:['Order']
        }),
        createOrder:build.mutation({
            query:(order)=>({
                url:`/order/create-order`,
                method:'POST',
                body:order
            }),
            invalidatesTags:['Order']
        }),
        createOrderBySeller:build.mutation({
            query:(orderInfo)=>({
                url:`/order/create-order/${orderInfo.userId}`,
                method:'POST',
                body:{
                    product:orderInfo.product,
                    quantity:orderInfo.quantity
                }
            }),
            invalidatesTags:['Order']
        }),
        customerDue:build.query({
            query:()=>({
                url:'/order/customer-due',
                method:'GET'
            })
        }),
        customerBalance:build.query({
            query:()=>({
                url:'/user/balance',
                method:'GET'
            })
        }),
        adminStoreId:build.query({
            query:()=>({
                url:'/admin/approved',
                method:"GET"
            })
        }),
        categories:build.query({
            query:()=>({
                url:'/category',
                method:'GET'
            }),
            providesTags:['Category']
        }),
        createCategory:build.mutation({
            query:(categoryInfo)=>({
                url:'/category/create',
                method:'POST',
                body:categoryInfo
            }),
            invalidatesTags:['Category']
        }),
        createProduct:build.mutation({
            query:(product)=>({
                url:'/product/create',
                method:'POST',
                body:product
            }),
            invalidatesTags:['Product']
        }),
        productsAdmin:build.query({
            query:()=>({
                url:'/product/admin',
                method:'GET'
            }),
            providesTags:['Product']
        }),
        productsCustomer:build.query({
            query:()=>({
                url:'/product',
                method:'GET'
            }),
            providesTags:['Product']
        }),
        allOrders:build.query({
            query:(query)=>({
                
                
                url:`/order?${query}`,
                method:'GET'
            }),
            providesTags:['AdminOrder']
        }),
        allOrdersSeller:build.query({
            query:(query)=>({
                
                
                url:`/order/seller?${query}`,
                method:'GET'
            }),
            providesTags:['AdminOrder']
        }),
        editOrder:build.mutation({
            query:({params,orderInfo})=>({
                
                
                url:`/order/${params}`,
                method:'PUT',
                body:orderInfo
                
            }),
            invalidatesTags:['AdminOrder']
        }),
        editOrderSeller:build.mutation({
            query:({params,orderInfo})=>({
                
                
                url:`/order/seller/${params}`,
                method:'PUT',
                body:orderInfo
                
            }),
            invalidatesTags:['AdminOrder']
        }),
        editUserRole:build.mutation({
            query:({params,userRole})=>({
                url:`/admin/user-role/${params}`,
                method:'PUT',
                body:{userRole}
            })
        }),
        totalBottle:build.query({
            query:()=>({
                url:`/bottle`,
                method:'GET'
            }),
            providesTags:['Bottle']
        }),
        createBottle:build.mutation({
            query:(stock)=>({
                url:`/bottle/create`,
                method:'POST',
                body:{stock}
            }),
            invalidatesTags:['Bottle']
        }),
        updateBottle:build.mutation({
            query:(stock)=>({
                url:`/bottle/update`,
                method:'PUT',
                body:{stock}
            }),
            invalidatesTags:['Bottle']
        }),
        widthdrawBottle:build.mutation({
            query:(stock)=>({
                url:`/bottle/widthdraw`,
                method:'PUT',
                body:{stock}
            }),
            invalidatesTags:['Bottle']
        }),
        totalBottleBySeller:build.query({
            query:()=>({
                url:`/bottle/seller`,
                method:'GET'
            }),
            providesTags:['Bottle']
        }),
        createBottleBySeller:build.mutation({
            query:(stock)=>({
                url:`/bottle/seller/create`,
                method:'POST',
                body:{stock}
            }),
            invalidatesTags:['Bottle']
        }),
        updateBottleBySeller:build.mutation({
            query:(stock)=>({
                url:`/bottle/seller/update`,
                method:'PUT',
                body:{stock}
            }),
            invalidatesTags:['Bottle']
        }),
        widthdrawBottleByseller:build.mutation({
            query:(stock)=>({
                url:`/bottle/seller/widthdraw`,
                method:'PUT',
                body:{stock}
            }),
            invalidatesTags:['Bottle']
        }),
       addBalanceBySeller:build.mutation({
        query:({amount,userId})=>({
            url:`/balance/add/${userId}`,
            method:'POST',
            body:{amount}
        })
       }),
       customerTotalBalanceBySeller:build.query({
        query:(userId)=>({
            url:`/balance/${userId}`,
            method:'GET',
        })
       }),
       
        totalCount:build.query({
            query:()=>({
                url:`/order/total`,
                method:'GET'
            })
        }),


        
    })
})

export const {useCustomerTotalBalanceBySellerQuery,useAddBalanceBySellerMutation,useWidthdrawBottleBysellerMutation,useTotalBottleBySellerQuery,useCreateBottleBySellerMutation,useUpdateBottleBySellerMutation,useCreateOrderBySellerMutation,useCustomersBySellerQuery,useEditOrderSellerMutation,useAllOrdersSellerQuery,useCustomerBalanceQuery,useTotalCountQuery,useUpdateAdditionalPriceMutation,useWidthdrawBottleMutation,useUpdateBottleMutation,useTotalBottleQuery,useCreateBottleMutation,useEditUserRoleMutation,useEditOrderMutation,useProductsCustomerQuery,useAdditionalPriceQuery,useCreateAdditionalPriceMutation,useCreateOrderMutation,useApprovedAdminQuery,useCustomerRegistrationMutation,useAllAdminQuery,useAdminProfileQuery,useCreateCategoryMutation,useUserProfileQuery,useCustomerDueQuery,useCustomerOrdersQuery,useUserLoginMutation,useAllOrdersQuery,useProductsAdminQuery,useCreateProductMutation,useCategoriesQuery,useRequestAdminAccountMutation,useAdminLoginMutation,useCustomersQuery} = baseApi